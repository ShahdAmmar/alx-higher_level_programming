Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Correct Class Type test:
    >>> mlst = MyList()
    >>> type(mlst) == MyList
    True

Correct Instance test:
    >>> mlst = MyList()
    >>> isinstance(mlst, list)
    True

print_sorted method is an instance method:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

print_sorted method called via class with no args:
    >>> mlst.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted method called with 1 arg:
    >>> mlst.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method called with 2 args:
    >>> mlst.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

empty list test:
    >>> mlst = MyList()
    >>> mlst.print_sorted()
    []

normal list test:
    >>> mlst = MyList([2, 10, -1])
    >>> mlst.print_sorted()
    [-1, 2, 10]

normal list test 2:
    >>> mlst = MyList([1, 4, 2, 3, 8])
    >>> mlst.print_sorted()
    [1, 2, 3, 4, 8]

negative integers list test:
    >>> mlst = MyList([-1000, -98, -232565, 0, -23423434, -123])
    >>> mlst.print_sorted()
    [-23423434, -232565, -1000, -123, -98, 0]

original list unchanged:
    >>> mlst = MyList([2, 10, 1, -10, 20, 200, 0])
    >>> mlst.print_sorted()
    [-10, 0, 1, 2, 10, 20, 200]
    >>> mlst
    [2, 10, 1, -10, 20, 200, 0]

ordered list:
    >>> mlst = MyList([-10, 0, 1, 2, 10, 20, 200])
    >>> mlst.print_sorted()
    [-10, 0, 1, 2, 10, 20, 200]

append test:
    >>> mlst = MyList()
    >>> mlst.append(15)
    >>> mlst
    [15]
